#!/usr/bin/env python

"""

USAGE: python pet2mri.py

	Required Arguments:

		-i/--input : Input pet volume
		-s/--subject : FreeSurfer subject id
		-r/--regtype : Registration type

	Conditionally Required Arguments:
		-c/--contrast : Scan contrast (e.g., T1, T2); Required if REGTYPE is bb and TRACER is not specified
		-t/--tracer : Radiotracter name; Required if REGTYPE is bb and CONTRAST is not specified


To-do:
-Save SUVr image [x]
-Is pandas slow for reading and writing?
-Refmask specification [x]
-Regfile specification []
-Reflabel specification []
-Reg options specification []
-Check surface and aseg existence []
-Surface based analysis[]


"""


# Load imports
import warnings
import os, sys
import shutil
import argparse
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

warnings.filterwarnings("ignore")

with warnings.catch_warnings():
	import nibabel as ni

subj_dir = os.environ['SUBJECTS_DIR']

print 'SUBJECTS_DIR is : ', subj_dir

if not subj_dir.endswith('/'):
	subj_dir += '/'


start = str(datetime.now())

parser = argparse.ArgumentParser()

# Get inputs
parser.add_argument('-i', '--input', help = 'Input PET volume - Nifi or MGH format')
parser.add_argument('-s', '--subject', help = 'Subjects FreeSurfer directory')
parser.add_argument('-r', '--regtype', help = 'Registration cost function - mi (normalized MI) or bb (boundary-based cost)')

# Contrast options for bbregister
parser.add_argument('-c', '--contrast', help = 'Contrast; If none is supplied, will assume t1')


# Different reference options
parser.add_argument('-rf', '--refmask', help = 'Specify mask of reference region')
parser.add_argument('-rl', '--reflabel', help = 'Specify label(s) of reference region')

## Everything below is not yet implemented
parser.add_argument('-nop', '--nopng', help = 'Output screenshots of coregistered PET volume overlaid on MRI')
parser.add_argument('-m', '--mni152', help = 'Register anatomical and PET volume to MRI')
parser.add_argument('-ir', '--inputreg', help = 'Input registration file (e.g. regfile.dat)')
parser.add_argument('-t', '--tracer', help = 'PET radiotracer')

parser.add_argument('-a', '--all', help = 'Run all processing steps')



# Registration options
parser.add_argument('-ro', '--regopts', help = 'Text-file with registration options')



args = parser.parse_args()

# Check minimum flags inputted
if not args.input:
	sys.exit('Error: No input volume provided')
if not args.subject:
	sys.exit('Error: No subject specified')
if not args.regtype:
	sys.exit('Error: No registration type specified')

# Check if inputs exist
if not os.path.exists(args.input):
	sys.exit('Error: Input volume %s does not exist' % (args.input))
sdir = subj_dir + args.subject
if not os.path.exists(sdir):
	sys.exit('Error: Subject %s not found in $SUBJECTS_DIR %s' % (args.subject, subj_dir))

print 'INPUT is : ', args.input
print 'SUBJECT is : ', args.subject

# Check registration type
if args.regtype == 'mi':
	sys.exit('Error: Normalized mutual information based coregistration not yet implemented')

if args.regtype != 'bb' and args.regtype != 'mi':
	sys.exit('Error: Registration type %s not recognized' % (args.regtype))


# Make a PET directory in the subject's FS directory
petdir = sdir + '/pet/'
if not os.path.exists(petdir):
	cmd = 'mkdir -p %s' % petdir
	os.system(cmd)

# Make a directory for this specific input
count = 1
currdir = petdir + "%03d"%count 
while os.path.exists(currdir):
	count += 1
	currdir = petdir + "%03d"%count
cmd = 'mkdir -p %s' % currdir
os.system(cmd)

# Copy the volume directory
voldir = currdir + '/vols/'
cmd = 'mkdir -p %s' % voldir
os.system(cmd)

# Get record of input file name
with open(voldir + 'input_vol.txt', 'w') as w:
	w.write(args.input + '\n')

# Copy the input volume into the volume directory
if args.input.endswith('.nii.gz'):
	prereg_vol = voldir + '/PET_prereg.nii.gz'
	shutil.copy(args.input, prereg_vol)
else:
	cmd = 'mri_convert %s %s' % (args.input, prereg_vol)
	os.system(cmd)


## Register PET to MRI

# Create registration directory file
regdir = currdir + '/regfiles/'
cmd = 'mkdir -p %s' % regdir
os.system(cmd)

regfile = regdir + '/regfile.dat'

# boundary-based registration
if args.regtype == 'bb':
	if args.contrast:
		cmd = 'bbregister --s %s --mov %s --reg %s --%s'  % (args.subject, prereg_vol, regfile, args.contrast)
	else:
		cmd = 'bbregister --s %s --mov %s --reg %s --t1'  % (args.subject, prereg_vol, regfile)
	os.system(cmd)

# normalized mutual information based registration
else:
	cmd = 'mri_coreg --s %s --mov %s --reg %s'  % (args.subject, prereg_vol, regfile)
	os.system(cmd)


# Apply registration to input pet volume
coreg_vol = voldir + '/PET_coreg.mgz'
cmd = 'mri_vol2vol --mov %s --targ %s/mri/orig.mgz --reg %s --o %s' % (prereg_vol, sdir, regfile, coreg_vol)
os.system(cmd)

# Convert output to Nifti ~ maybe we can just make
# the output of mri_vol2vol, nifti format
cmd = 'mri_convert %s %s' % (coreg_vol, coreg_vol.replace('.mgz', '.nii.gz'))
os.system(cmd)


## Generate PET stats

# make stats directory
stat_dir = currdir + '/stats/'
cmd = 'mkdir -p %s' % stat_dir
os.system(cmd)

# copy mri stats folder in nifti format
src_aseg = sdir + '/mri/aparc+aseg.mgz'
targ_aseg = stat_dir + '/aparc+aseg.nii.gz'

# Check existence 
cmd = 'mri_convert %s %s' % (src_aseg, targ_aseg)
os.system(cmd)

cmd = 'mri_convert %s %s' % (src_aseg.replace('aparc+', ''), targ_aseg.replace('aparc+', ''))
os.system(cmd)



# Load aseg and pet data
aseg_data = ni.load(targ_aseg).get_data()
labels = set(aseg_data.flatten())
label_df = pd.read_csv('fs_gm.csv', header=None)
label_df.columns = ['Region', 'Label']

pet_img = ni.load(coreg_vol.replace('.mgz', '.nii.gz'))
pet_data, pet_aff = pet_img.get_data(), pet_img.affine

# Get mean uptake from reference

# This was wrong
# lmu, rmu = np.mean(pet_data[np.where(aseg_data == 8)]), np.mean(pet_data[np.where(aseg_data == 47)])
# ref_val = 0.5 * (lmu + rmu)

ref_mask = np.zeros(pet_data.shape)

# Inputted ref mask
if args.refmask:
	if args.refmask.endswith('.mgz'):
		cmd = 'mri_convert %s %s' % (args.refmask, stat_dir + 'ref_mask.nii.gz')
		os.system(cmd)
	elif args.refmask.endswith('.mgh'):
		cmd = 'mri_convert %s %s' % (args.refmask, stat_dir + 'ref_mask.nii.gz')
		os.system(cmd)
	elif args.refmask.endswith('.nii'):
		cmd = 'mri_convert %s %s' % (args.refmask, stat_dir + 'ref_mask.nii.gz')
		os.system(cmd)
	else:
		irname = args.refmask
	

	ir_data = ni.load(irname).get_data()
	ref_mask[np.where(ir_data != 0)] = 1

# Cerebellar grey matter
else:
	ref_mask[np.where(aseg_data == 8)] = 1
	ref_mask[np.where(aseg_data == 47)] = 1



ref_val = np.mean(pet_data[np.where(ref_mask == 1)])


# Generate and save SUVr image
suvr_data = pet_data / ref_val
suvr_name = voldir + '/PET_suvr.nii.gz'
suvr_img = ni.Nifti1Image(suvr_data, pet_aff)
ni.save(suvr_img, suvr_name)


mus, stds = [], []
for ind in range(len(label_df)):
	roi, label = label_df.Region.values[ind], label_df.Label.values[ind]
	mus.append(np.mean(suvr_data[np.where(aseg_data == label)]))
	# stds.append(np.std(pet_data[np.where(aseg_data == label)])/ref_val)
label_df['SUVr_mean'] = mus

# Write out to .csv file
outname = stat_dir + 'suvr_data.csv'
label_df.to_csv(outname, index=False)


### Screenshots

# Make PNG dir
jpg_dir = currdir + '/pngs/'
os.system('mkdir -p %s' % jpg_dir)

src_orig = sdir + '/mri/orig.mgz'
targ_orig = jpg_dir + '/orig.nii.gz'
cmd = 'mri_convert %s %s ' % (src_orig, targ_orig)
os.system(cmd)

orig_data = ni.load(targ_orig).get_data()
oshape = orig_data.shape
pshape = pet_data.shape


print 'Orig Shape: ', oshape
print 'PET Shape: ', pshape

# We should make this always the same orientation
for sl in range(oshape[1]):
	plt.figure(figsize = (10, 8))
	plt.imshow(orig_data[:, :, sl].transpose())
	plt.imshow(pet_data[:, :, sl].transpose(), cmap = 'hot', alpha = 0.5)
	plt.savefig(jpg_dir + 'image%03d'%sl  + '.png', bbox_inches='tight', pad_inches=0.0)
	plt.clf()



print 'Completed processing PET volume'
print 'Started at: ', start
print 'Finished at: ', str(datetime.now())




## Everything below is not yet implemented

## MNI Space
# Compute registration of structural to MNI152 space
cmd = 'mni152reg --s %s' % args.subject

# Apply registration to structural and to PET

cmd = 'mri_vol2vol '


## Surface based analysis
# Register volume to surface - sample half way
import subprocess
























