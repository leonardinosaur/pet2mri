#!/usr/bin/env python

"""

USAGE: python pet2mri.py

	Required Arguments:

		-i/--input : Input pet volume
		-s/--subject : FreeSurfer subject id
		-r/--regtype : Registration type

	Conditionally Required Arguments:
		-c/--contrast : Scan contrast (e.g., T1, T2); Required if REGTYPE is bb and TRACER is not specified
		-t/--tracer : Radiotracter name; Required if REGTYPE is bb and CONTRAST is not specified


"""

import warnings
warnings.filterwarnings("ignore")


import os, sys
import shutil
from glob import glob
import argparse
import random

import pandas as pd
import numpy as np
import nibabel as ni
import matplotlib.pyplot as plt

from datetime import datetime



subj_dir = os.environ['SUBJECTS_DIR']
print 'SUBJECTS_DIR is : ', subj_dir
if not subj_dir.endswith('/'):
	subj_dir += '/'


start = str(datetime.now())

parser = argparse.ArgumentParser(description=__doc__)

# Get inputs
parser.add_argument('-i', '--input', help = 'Input PET volume - Nifi or MGH format')
parser.add_argument('-s', '--subject', help = 'Subjects FreeSurfer directory')
parser.add_argument('-r', '--regtype', help = 'Registration cost function - mi (normalized MI) or bb (boundary-based cost)')

# Contrast options for bbregister
parser.add_argument('-c', '--contrast', help = 'Contrast; If none is supplied, will assume t1')


# Different reference options
parser.add_argument('-rf', '--refmask', help = 'Specify mask of reference region')
parser.add_argument('-fl', '--reflabel', help = 'Specify labels of reference region')

## Everything below is not yet implemented
parser.add_argument('-nop', '--nopng', help = 'Output screenshots of coregistered PET volume overlaid on MRI')
parser.add_argument('-m', '--mni152', help = 'Register anatomical and PET volume to MRI')
parser.add_argument('-v', '--visqc', help = 'Visual QC')
parser.add_argument('-ir', '--inputreg', help = 'Input registration file (e.g. regfile.dat)')
parser.add_argument('-t', '--tracer', help = 'PET radiotracer')


# Registration options
parser.add_argument('-ro', '--regopts', help = 'Text-file with registration options')



args = parser.parse_args()

# Check complete flags
if not args.input:
	sys.exit('Error: No input volume provided')
if not args.subject:
	sys.exit('Error: No subject specified')
if not args.regtype:
	sys.exit('Error: No registration type specified')

# Check if inputs exist
if not os.path.exists(args.input):
	sys.exit('Error: Input volume %s does not exist' % (args.input))
sdir = subj_dir + args.subject
if not os.path.exists(sdir):
	sys.exit('Error: Subject %s not found in $SUBJECTS_DIR %s' % (args.subject, subj_dir))


# Check registration type
if args.regtype == 'mi':
	sys.exit('Error: Normalized mutual information based coregistration not yet implemented')

if args.regtype != 'bb' and args.regtype != 'mi':
	sys.exit('Error: Registration type %s not recognized' % (args.regtype))


# Make a PET directory
petdir = sdir + '/pet/'
if not os.path.exists(petdir):
	cmd = 'mkdir -p %s' % petdir
	os.system(cmd)

# Make a directory for this specific input
count = 1
currdir = petdir + "%03d"%count 
while os.path.exists(currdir):
	count += 1
	currdir = petdir + "%03d"%count
cmd = 'mkdir -p %s' % currdir
os.system(cmd)

# Copy the volume directory
voldir = currdir + '/vols/'
cmd = 'mkdir -p %s' % voldir
os.system(cmd)

# Copy the input volume into the volume directory
if args.input.endswith('.nii.gz'):
	prereg_vol = voldir + '/PET_prereg.nii.gz'
	shutil.copy(args.input, prereg_vol)
else:
	cmd = 'mri_convert %s %s' % (args.input, prereg_vol)
	os.system(cmd)


## Register PET to MRI

# Create registration directory file
regdir = currdir + '/regfiles/'
cmd = 'mkdir -p %s' % regdir
os.system(cmd)

regfile = regdir + '/regfile.dat'

# bbregister
if args.regtype == 'bb':
	if args.contrast:
		cmd = 'bbregister --s %s --mov %s --reg %s --%s'  % (args.subject, prereg_vol, regfile, args.contrast)
		os.system(cmd)
	else:
		cmd = 'bbregister --s %s --mov %s --reg %s --t1'  % (args.subject, prereg_vol, regfile)
		os.system(cmd)

# mri_coreg
else:
	cmd = 'mri_coreg --s %s --mov %s --reg %s --%s'  % (args.subject, prereg_vol, regfile, args.contrast)
	os.system(cmd)


# Apply registration to input pet volume
coreg_vol = voldir + '/PET_coreg.mgz'
cmd = 'mri_vol2vol --mov %s --targ %s/mri/orig.mgz --reg %s --o %s' % (prereg_vol, sdir, regfile, coreg_vol)
os.system(cmd)

# Convert output to Nifti ~ maybe we can just make
# the output of mri_vol2vol, nifti
cmd = 'mri_convert %s %s' % (coreg_vol, coreg_vol.replace('.mgz', '.nii.gz'))
os.system(cmd)

# Calculate SUVrs

# make stats directory
stat_dir = currdir + '/stats/'
cmd = 'mkdir -p %s' % stat_dir
os.system(cmd)

# copy mri and aseg to PET folder in nifti format
src_aseg = sdir + '/mri/aparc+aseg.mgz'
targ_aseg = stat_dir + '/aseg.nii.gz'
cmd = 'mri_convert %s %s' % (src_aseg, targ_aseg)
os.system(cmd)



# Load aseg and pet data
aseg_data, pet_data = ni.load(targ_aseg).get_data(), ni.load(coreg_vol.replace('.mgz', '.nii.gz')).get_data()
labels = set(aseg_data.flatten())

# Get mean uptake from reference
label_df = pd.read_csv('fs_gm.csv', header=None)
label_df.columns = ['Region', 'Label']

lmu, rmu = np.mean(pet_data[np.where(aseg_data == 8)]), np.mean(pet_data[np.where(aseg_data == 47)])
ref_val = 0.5 * (lmu + rmu)


mus, stds, vols = [], [], []
for ind in range(len(label_df)):
	roi, label = label_df.Region.values[ind], label_df.Label.values[ind]
	mus.append(np.mean(pet_data[np.where(aseg_data == label)])/ref_val)
	# stds.append(np.std(pet_data[np.where(aseg_data == label)])/ref_val)
label_df['SUVr_mean'] = mus

# Write out to .csv file
outname = stat_dir + 'suvr_data.csv'
label_df.to_csv(outname, index=False)


# Make PNG dir
jpg_dir = currdir + '/pngs/'
os.system('mkdir -p %s' % jpg_dir)

src_orig = sdir + '/mri/orig.mgz'
targ_orig = jpg_dir + '/orig.nii.gz'
cmd = 'mri_convert %s %s ' % (src_orig, targ_orig)
os.system(cmd)


orig_data = ni.load(targ_orig).get_data()
oshape = orig_data.shape
pshape = pet_data.shape


print 'Orig Shape: ', oshape
print 'PET Shape: ', pshape

# We should make this always the same orientation
for sl in range(oshape[1]):
	plt.figure(figsize = (10, 8))
	plt.imshow(orig_data[:, :, sl].transpose())
	plt.imshow(pet_data[:, :, sl].transpose(), cmap = 'hot', alpha = 0.5)
	plt.savefig(jpg_dir + 'image%03d'%sl  + '.png', bbox_inches='tight', pad_inches=0.0)
	plt.clf()


## Everything below is not yet implemented
# Compute registration of structural to MNI
cmd = 'mni152reg --s %s' % args.subject

# Apply registration to structural and to PET



print 'Completed processing PET volume'
print 'Started at: ', start
print 'Finished at: ', str(datetime.now())